// <auto-generated />
using System;
using MainBot.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MainBot.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220306185849_backupGuildUpgrade1")]
    partial class backupGuildUpgrade1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Links.GuildUsers", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Guildkey")
                        .HasColumnType("int");

                    b.Property<int>("userkey")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("Guildkey");

                    b.HasIndex("userkey");

                    b.ToTable("GuildUsers");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Links.UserRoles", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Userkey")
                        .HasColumnType("int");

                    b.Property<int>("guildkey")
                        .HasColumnType("int");

                    b.Property<int>("rolekey")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("Userkey");

                    b.HasIndex("guildkey");

                    b.HasIndex("rolekey");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Permissions.RolePermissions", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AddReactions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Administrator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AttachFiles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("BanMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ChangeNickname")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Connect")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreateInstantInvite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreatePrivateThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CreatePublicThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DeafenMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EmbedLinks")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("KickMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageChannels")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageEmojisAndStickers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageEvents")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageGuild")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageNicknames")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageRoles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManageWebhooks")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MentionEveryone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MoveMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MuteMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PrioritySpeaker")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReadMessageHistory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequestToSpeak")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendMessagesInThreads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendTTSMessages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Speak")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("StartEmbeddedActivities")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Stream")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseApplicationCommands")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseExternalEmojis")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseExternalStickers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseVAD")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewAuditLog")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewChannel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ViewGuildInsights")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("moderateMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("useVoiceActivation")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("key");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Role", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("color")
                        .HasColumnType("int unsigned");

                    b.Property<string>("icon")
                        .HasColumnType("longtext");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("isEveryone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isHoisted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isManaged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isMentionable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("permissionskey")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.HasKey("key");

                    b.HasIndex("permissionskey");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.User", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("accessToken")
                        .HasColumnType("longtext");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("refreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MainBot.Database.Models.Guild", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("guildSettingskey")
                        .HasColumnType("int");

                    b.Property<ulong>("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.HasIndex("guildSettingskey");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("MainBot.Database.Models.GuildSettings", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong?>("administratorRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("hiddenRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("messageLogChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("moderatorRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("muteRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("rainbowRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("userLogChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("verifyRoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("key");

                    b.ToTable("GuildSettings");
                });

            modelBuilder.Entity("MainBot.Database.Models.Logs.ErrorLog", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("errorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("extraInformation")
                        .HasColumnType("longtext");

                    b.Property<string>("message")
                        .HasColumnType("longtext");

                    b.Property<string>("source")
                        .HasColumnType("longtext");

                    b.Property<string>("stackTrace")
                        .HasColumnType("longtext");

                    b.HasKey("key");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Links.GuildUsers", b =>
                {
                    b.HasOne("MainBot.Database.Models.Guild", null)
                        .WithMany("users")
                        .HasForeignKey("Guildkey");

                    b.HasOne("MainBot.Database.Models.DiscordBackup.User", "user")
                        .WithMany()
                        .HasForeignKey("userkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Links.UserRoles", b =>
                {
                    b.HasOne("MainBot.Database.Models.DiscordBackup.User", null)
                        .WithMany("roles")
                        .HasForeignKey("Userkey");

                    b.HasOne("MainBot.Database.Models.Guild", "guild")
                        .WithMany()
                        .HasForeignKey("guildkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBot.Database.Models.DiscordBackup.Role", "role")
                        .WithMany()
                        .HasForeignKey("rolekey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("guild");

                    b.Navigation("role");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.Role", b =>
                {
                    b.HasOne("MainBot.Database.Models.DiscordBackup.Permissions.RolePermissions", "permissions")
                        .WithMany()
                        .HasForeignKey("permissionskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissions");
                });

            modelBuilder.Entity("MainBot.Database.Models.Guild", b =>
                {
                    b.HasOne("MainBot.Database.Models.GuildSettings", "guildSettings")
                        .WithMany()
                        .HasForeignKey("guildSettingskey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("guildSettings");
                });

            modelBuilder.Entity("MainBot.Database.Models.DiscordBackup.User", b =>
                {
                    b.Navigation("roles");
                });

            modelBuilder.Entity("MainBot.Database.Models.Guild", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
